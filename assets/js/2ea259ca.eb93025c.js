"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7884],{3905:(e,n,i)=>{i.r(n),i.d(n,{MDXContext:()=>s,MDXProvider:()=>m,mdx:()=>h,useMDXComponents:()=>u,withMDXComponents:()=>c});var t=i(67294);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var i=arguments[n];for(var t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t])}return e},o.apply(this,arguments)}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function d(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=t.createContext({}),c=function(e){return function(n){var i=u(n.components);return t.createElement(e,o({},n,{components:i}))}},u=function(e){var n=t.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},m=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},b=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),c=u(i),m=a,f=c["".concat(r,".").concat(m)]||c[m]||p[m]||o;return i?t.createElement(f,l(l({ref:n},s),{},{components:i})):t.createElement(f,l({ref:n},s))}));function h(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=i.length,r=new Array(o);r[0]=b;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[f]="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=i[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,i)}b.displayName="MDXCreateElement"},67649:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=i(87462),a=(i(67294),i(3905));const o={id:"offline_build_archives",title:"Offline build archives"},r=void 0,l={unversionedId:"users/advanced/offline_build_archives",id:"users/advanced/offline_build_archives",title:"Offline build archives",description:'Buck2 has the capability of producing so-called "offline build archives". These archives are Antlir OS images which contain every input necessary to build a buck target (or fbpkg.builder target), including:',source:"@site/../docs/users/advanced/offline_build_archives.md",sourceDirName:"users/advanced",slug:"/users/advanced/offline_build_archives",permalink:"/docs/users/advanced/offline_build_archives",draft:!1,tags:[],version:"current",frontMatter:{id:"offline_build_archives",title:"Offline build archives"}},d={},s=[{value:"How to build an image",id:"how-to-build-an-image",level:2},{value:"Building inside the image",id:"building-inside-the-image",level:2},{value:"Working inside the image",id:"working-inside-the-image",level:3},{value:"Copy built package out of the container",id:"copy-built-package-out-of-the-container",level:2},{value:"Additional build modes",id:"additional-build-modes",level:2},{value:"Recovering your service with an offline build image",id:"recovering-your-service-with-an-offline-build-image",level:2},{value:"Implementation details",id:"implementation-details",level:2}],c={toc:s};function u(e){let{components:n,...i}=e;return(0,a.mdx)("wrapper",(0,t.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,'Buck2 has the capability of producing so-called "offline build archives". These archives are ',(0,a.mdx)("a",{parentName:"p",href:"https://www.internalfb.com/intern/staticdocs/antlir/"},"Antlir")," OS images which contain ",(0,a.mdx)("em",{parentName:"p"},"every")," input necessary to build a buck target (or ",(0,a.mdx)("a",{parentName:"p",href:"https://www.internalfb.com/intern/wiki/Fbpkg/fbpkg.builder/"},"fbpkg.builder")," target), including:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"Source files"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://www.internalfb.com/intern/wiki/Gvfs/"},"gvfs")," artifacts"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://www.internalfb.com/intern/wiki/DotSlash/"},"Dotslash")," executables; these are prefetched and cached in the resulting OS image."),(0,a.mdx)("li",{parentName:"ul"},"Buckconfig files from inside and outside the repository")),(0,a.mdx)("h2",{id:"how-to-build-an-image"},"How to build an image"),(0,a.mdx)("p",null,"Offline build archives are primarily centered around producing OS images in which you can build an fbpkg in a fully-offline, low-Meta-dependency environment."),(0,a.mdx)("p",null,"In order to build an image, you need to add a new rule definition along side your ",(0,a.mdx)("inlineCode",{parentName:"p"},"fbpkg.builder")," target. Assume you have a service + ",(0,a.mdx)("inlineCode",{parentName:"p"},"fbpkg.builder")," definition like so:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-[python]"},'load("@fbcode_macros//build_defs:cpp_binary.bzl", "cpp_binary")\n\n# Import experimental fbpkg.builder using native buck2 rules\nload("//fbpkg:fbpkg.bzl", "fbpkg")\n\ncpp_binary(\n    name = "my_service",\n    srcs = [\n        "main.cpp",\n    ],\n    deps = [\n        "//some/dep:one",\n        "//another/dep:two",\n    ],\n)\n\nfbpkg.builder(\n    name = "my.service",\n    buck_opts = fbpkg.buck_opts(\n        mode = "opt-clang-thinlto",\n    ),\n    path_actions = {\n        "my_service": ":my_service",\n    },\n)\n')),(0,a.mdx)("p",null,"Add a new rule using the ",(0,a.mdx)("inlineCode",{parentName:"p"},"offline_builder")," rule type:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'fbpkg.offline_builder(\n    name = "my.service-offline",\n    fbpkg = ":my.service",\n)\n')),(0,a.mdx)("p",null,"The output of ",(0,a.mdx)("inlineCode",{parentName:"p"},"//:my.service-offline")," will be an fbpkg containing an Antlir container with all inputs - both from the repo as well as from the network - necessary to build that fbpkg."),(0,a.mdx)("h2",{id:"building-inside-the-image"},"Building inside the image"),(0,a.mdx)("p",null,"The OS image will contain all input files necessary to produce the desired output artifact(s) in a no-network, low-dependency environment."),(0,a.mdx)("p",null,"In every offline builder fbpkg, a simple tool called ",(0,a.mdx)("inlineCode",{parentName:"p"},"offline_builder")," is included. This is a simple python binary which makes it easier to work with offline build images."),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"offline_builder")," utility has three commands:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"receive-image"),": Unpacks the btrfs sendstream-v2 image that Antlir produces to an on-disk btrfs subvolume"),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"enter-image"),": Invokes ",(0,a.mdx)("inlineCode",{parentName:"li"},"systemd-nspawn")," to drop you into a shell inside the container image."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"build-fbpkg"),": Invokes ",(0,a.mdx)("inlineCode",{parentName:"li"},"systemd-nspawn")," with the appropriate command to build the fbpkg inside the container image.")),(0,a.mdx)("p",null,"NOTE: All ",(0,a.mdx)("inlineCode",{parentName:"p"},"offline_builder")," commands must be run with root permissions (e.g. with ",(0,a.mdx)("inlineCode",{parentName:"p"},"sudo"),")."),(0,a.mdx)("p",null,"The general process of working with an offline build image is the following:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-[bash]"},"# Fetch the offline builder fbpkg\n$ fbpkg fetch my.service-offline:$hash\n\n# Unpack the image on disk\n$ sudo ./offline_builder receive-image\nINFO:root:`btrfs receive`ing image '/tmp/offline/sendstream.v2' into '/tmp/offline/my.service-offline'\nINFO:root:Received image to /tmp/offline/my.service-offline/e5b93112027f479eb30b2c35f831b1aa\nINFO:root:Marking image '/tmp/offline/my.service-offline/e5b93112027f479eb30b2c35f831b1aa' as r/w\n\n# Enter the image\n$ sudo ./offline_builder enter-image\nSpawning container e5b93112027f479eb30b2c35f831b1aa on /temp/offline/my.service-offline/e5b93112027f479eb30b2c35f831b1aa.\nPress ^] three times within 1s to kill container.\n[facebook@e5b93112027f479eb30b2c35f831b1aa ~]$\n\n# Alternatively, you can also build the fbpkg directly from the host machine\n$ sudo ./offline_builder build-fbpkg\n...\n")),(0,a.mdx)("h3",{id:"working-inside-the-image"},"Working inside the image"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"offline_builder enter-image")," drops you into the container as the ",(0,a.mdx)("inlineCode",{parentName:"p"},"facebook")," service user. This user has various settings and configurations configured on login for buck2 and the new ",(0,a.mdx)("inlineCode",{parentName:"p"},"fbpkg-build")," entrypoint to work offline by default with no extra flags or configuration required."),(0,a.mdx)("p",null,'There\'s a "checkout" of fbsource at ',(0,a.mdx)("inlineCode",{parentName:"p"},"/home/facebook")," (not a real source code repository, but enough to get builds working), as well as a cached dotslash directory with prefetched executables."),(0,a.mdx)("p",null,"Inside the fbsource repository are one or more shell scripts to make it easier to perform offline builds:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-[bash]"},'[facebook@e5b93112027f479eb30b2c35f831b1aa fbsource]$ ls -l *.sh\n-rwxr-xr-x 1 facebook root 113 Aug 30 06:21 build_fbpkg.sh\n-rwxr-xr-x 1 facebook root 136 Aug 30 06:21 build_fbpkg_belljar.barservice_targets_mode-opt.sh\n-rwxr-xr-x 1 facebook root 930 Aug 30 05:48 build_fbpkg_impl.sh\n\n[facebook@e5b93112027f479eb30b2c35f831b1aa fbsource]$ cat build_fbpkg.sh\n#!/bin/sh\n\nexec /home/facebook/fbsource/build_fbpkg_impl.sh fbcode//belljar/blanks/barservice:belljar.barservice\n\n[facebook@my_service_offline fbsource]$ ./build_fbpkg.sh\n2023-08-08T11:58:01.709968604-07:00  INFO registry_build_utils::build_utils: Using repo found at cwd: /home/facebook/fbsource\nBuck UI: https://www.internalfb.com/buck2/1dbe44a6-2089-46b5-b5fe-83ba82facf69\nJobs completed: 78265. Time elapsed: 50.2s.\nCache hits: 0%. Commands: 18 (cached: 0, remote: 0, local: 18)\nBUILD SUCCEEDED\n2023-08-08T18:59:00.958700Z  WARN buck2_client_ctx::cleanup_ctx: Async cleanup step \'sending invocation to Scribe\' took 3.535555792s\n{\n  "x86_64": "/home/facebook/fbsource/buck-out/v2/gen/fbcode/29146bce1651974e/path/to/my_service_offline/__my_service_offline__/tree"\n}\n')),(0,a.mdx)("blockquote",null,(0,a.mdx)("p",{parentName:"blockquote"},"NOTE: today, this only produces a tree of artifacts that represents ",(0,a.mdx)("strong",{parentName:"p"},"uncompressed")," fbpkg contents. In the future, this will be updated to produce a fully compressed fbpkg that can be handed off to tupperware. The script above will print out the location of the built fbpkg")),(0,a.mdx)("h2",{id:"copy-built-package-out-of-the-container"},"Copy built package out of the container"),(0,a.mdx)("p",null,"When invoking ",(0,a.mdx)("inlineCode",{parentName:"p"},"offline_builder build-fbpkg"),", a special ",(0,a.mdx)("inlineCode",{parentName:"p"},"offline-out")," directory is created in the root of the extracted fbpkg. This directory will be bind-mounted with read/write permissions inside the container, and once the fbpkg build inside the container is done, all build artifacts will be recursively copied to this directory."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-[bash]"},"$ sudo ./offline_builder build-fbpkg\nSpawning container e5b93112027f479eb30b2c35f831b1aa on /tmp/offline/my.service-offline/e5b93112027f479eb30b2c35f831b1aa.\nPress ^] three times within 1s to kill container.\n2023-08-30T09:20:14.962454825-07:00  INFO registry_build_utils::build_utils: Using repo found at cwd: /home/facebook/fbsource\nBuck UI: https://www.internalfb.com/buck2/1847d785-0ebf-44d9-8831-a695e6d6dae0\nJobs completed: 76504. Time elapsed: 24:20.6s.\nCache hits: 0%. Commands: 27640 (cached: 0, remote: 0, local: 27640)\nBUILD SUCCEEDED\n\n$ ls -l ./offline-out\ntotal 74M\n-rwxr-xr-x 1 1000 users 74M Aug 30 09:44 my_service*\n")),(0,a.mdx)("p",null,"You can then copy these build artifacts elsewhere."),(0,a.mdx)("h2",{id:"additional-build-modes"},"Additional build modes"),(0,a.mdx)("p",null,"Iterating by building a full fbpkg can be slow, particularly if the service is built with very optimized but slow modes like ",(0,a.mdx)("inlineCode",{parentName:"p"},"opt-clang-thinlto"),". Instead, you can add additional modes in which we'll instrument a build and other inputs and configurations into the final container:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-[bash]"},'fbpkg.offline_builder(\n    name = "my.service-offline",\n    fbpkg = ":my.service",\n    additional_modes = [\n        "fbcode/mode/opt",\n        "fbcode/mode/dev",\n    ],\n)\n')),(0,a.mdx)("p",null,"This results in a new shell script at the root of the container fbsource repository, one for each mode:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-[bash]"},"[facebook@my_service_offline fbsource]$ ls -l *.sh\n-rwxr-xr-x 1 facebook users 167 Jul 20 10:07 build_fbpkg.sh\n-rwxr-xr-x 1 facebook users 123 Jul 20 10:07 build_fbpkg_my_service_targets_mode-opt.sh\n-rwxr-xr-x 1 facebook users 123 Jul 20 10:07 build_fbpkg_my_service_targets_mode-dev.sh\n\n[facebook@my_service_offline fbsource]$ cat build_my_service_targets_mode-opt.sh\n#!/bin/sh\n\nexec buck2 build @fbsource//fbcode/mode/opt fbcode//my/service:my_service\n")),(0,a.mdx)("p",null,"These shell scripts by default build all targets specified in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"fbpkg.builder")," target, but you can also invoke the ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck2 build")," command accordingly."),(0,a.mdx)("h2",{id:"recovering-your-service-with-an-offline-build-image"},"Recovering your service with an offline build image"),(0,a.mdx)("p",null,"Offline build images are provided to be able to ",(0,a.mdx)("strong",{parentName:"p"},"build a fully hermetic, reproducible build in a completely isolated environment"),' with no external dependencies. The primary scenario in mind is the need to "fix-forward" when Remote Execution or CAS are unavailable.'),(0,a.mdx)("p",null,"The expected process for working with and recovering services in an offline build image looks like the following:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Follow steps in ",(0,a.mdx)("a",{parentName:"li",href:"#how-to-build-an-image"},'"How to build an image"')),(0,a.mdx)("li",{parentName:"ol"},"Enter the image with ",(0,a.mdx)("inlineCode",{parentName:"li"},"sudo ./offline_builder enter-image")),(0,a.mdx)("li",{parentName:"ol"},"Edit any files that need to be edited"),(0,a.mdx)("li",{parentName:"ol"},"Run your build with ",(0,a.mdx)("inlineCode",{parentName:"li"},"./build_fbpkg_$name_targets_mode-opt.sh")),(0,a.mdx)("li",{parentName:"ol"},"??? (TBD)")),(0,a.mdx)("p",null,"NOTE: For faster incremental builds, ",(0,a.mdx)("strong",{parentName:"p"},"stay in the container"),". Without this, the buck2 daemon will be killed on container exit, and it has to spend a ton of time rebuilding internal graph state."),(0,a.mdx)("h2",{id:"implementation-details"},"Implementation details"),(0,a.mdx)("p",null,"Several environment variables must be set to perform fully-offline builds. These are all set in user-level ",(0,a.mdx)("inlineCode",{parentName:"p"},".bash_profile")," scripts (which take effect on login):"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"BUCK_OFFLINE_BUILD")," must be set; this indicates to buck2 that it should only perform ",(0,a.mdx)("em",{parentName:"li"},"local execution")," and disable talking to the RE cache layer. Support is also built into ",(0,a.mdx)("inlineCode",{parentName:"li"},"fbpkg-build")," to use a fake fbpkg uuid and build token rather than allocating one from the fbpkg frontend service."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"DOTSLASH_CACHE")," is set to ",(0,a.mdx)("inlineCode",{parentName:"li"},"/home/facebook/dotslash_cache"),". This tells dotslash to look in this directory for prefetched dotslash executables.")),(0,a.mdx)("p",null,"There are also several buckconfigs that must be set to get buck2 working fully-offline:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"buck2.file_watcher = notify")," disables watchman; we don't need watchman during an offline build"),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"buck2.use_network_action_output_cache = true")," tells buck2 to use precached action outputs from ",(0,a.mdx)("inlineCode",{parentName:"li"},"ctx.actions.download_file")," to e.g. perform a HEAD request to figure out if a file needs to be redownloaded during the build. These action outputs are cached in ",(0,a.mdx)("inlineCode",{parentName:"li"},"fbsource/buck-out/v2/offline-cache"),".")))}u.isMDXComponent=!0}}]);