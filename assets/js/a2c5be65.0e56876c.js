"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8535],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>x,useMDXComponents:()=>m,withMDXComponents:()=>s});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},o.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=i.createContext({}),s=function(e){return function(n){var t=m(n.components);return i.createElement(e,o({},n,{components:t}))}},m=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return i.createElement(d.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),s=m(t),p=a,u=s["".concat(r,".").concat(p)]||s[p]||f[p]||o;return t?i.createElement(u,l(l({ref:n},d),{},{components:t})):i.createElement(u,l({ref:n},d))}));function x(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=h;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var d=2;d<o;d++)r[d]=t[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},60203:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var i=t(87462),a=(t(67294),t(3905));const o={id:"buckconfig",title:".buckconfig"},r=void 0,l={unversionedId:"concepts/buckconfig",id:"concepts/buckconfig",title:".buckconfig",description:"The root of your project must contain a configuration file named .buckconfig. Before executing, Buck2 reads this file to incorporate any customizations it specifies.",source:"@site/../docs/concepts/buckconfig.md",sourceDirName:"concepts",slug:"/concepts/buckconfig",permalink:"/docs/concepts/buckconfig",draft:!1,tags:[],version:"current",frontMatter:{id:"buckconfig",title:".buckconfig"},sidebar:"manualSidebar",previous:{title:"Daemon (buckd)",permalink:"/docs/concepts/daemon"},next:{title:"Glossary of Terms",permalink:"/docs/concepts/glossary"}},c={},d=[{value:"Performance impact of Buck2 configuration changes",id:"performance-impact-of-buck2-configuration-changes",level:2},{value:"The .buckconfig file uses the INI file format",id:"the-buckconfig-file-uses-the-ini-file-format",level:2},{value:"Other INI file parsers",id:"other-ini-file-parsers",level:3},{value:"Dot character not supported in section names",id:"dot-character-not-supported-in-section-names",level:3},{value:"Character encoding",id:"character-encoding",level:2},{value:"Key values as lists",id:"key-values-as-lists",level:2},{value:"Transclusion of values from one key to another",id:"transclusion-of-values-from-one-key-to-another",level:2},{value:"Comments",id:"comments",level:2},{value:".buckconfig.local",id:"buckconfiglocal",level:2},{value:"Other initialization files",id:"other-initialization-files",level:2},{value:"Command-line control of configuration",id:"command-line-control-of-configuration",level:2},{value:"Precedence of Buck2 configuration specifications",id:"precedence-of-buck2-configuration-specifications",level:2},{value:"Configuration files can include other files",id:"configuration-files-can-include-other-files",level:2}],s={toc:d};function m(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"The root of your ",(0,a.mdx)("a",{parentName:"p",href:"/docs/concepts/glossary#project"},"project")," must contain a configuration file named ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". Before executing, Buck2 reads this file to incorporate any customizations it specifies."),(0,a.mdx)("h2",{id:"performance-impact-of-buck2-configuration-changes"},"Performance impact of Buck2 configuration changes"),(0,a.mdx)("p",null,"Because configuration settings are sometimes included in the cache keys that Buck2 uses in its caching system, changes to Buck's configuration can invalidate previously-built artifacts in Buck's caches. If this occurs, Buck2 rebuilds those artifacts, which can impact your build time."),(0,a.mdx)("h2",{id:"the-buckconfig-file-uses-the-ini-file-format"},"The .buckconfig file uses the INI file format"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file uses the ",(0,a.mdx)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/INI_file"},"INI file format"),". That is, it is divided into ",(0,a.mdx)("em",{parentName:"p"},"sections")," where each section contains a collection of key ",(0,a.mdx)("em",{parentName:"p"},"names")," and key ",(0,a.mdx)("em",{parentName:"p"},"values"),". The ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," implementation supports some modifications to the INI file format; these are discussed below."),(0,a.mdx)("h3",{id:"other-ini-file-parsers"},"Other INI file parsers"),(0,a.mdx)("p",null,"As mentioned previously, we have extended the INI file parser that Buck2 uses to parse configuration files. As a result, ",(0,a.mdx)("em",{parentName:"p"},"INI file parsers provided by other languages or libraries are often not able to parse Buck's configuration files successfully"),"."),(0,a.mdx)("h3",{id:"dot-character-not-supported-in-section-names"},"Dot character not supported in section names"),(0,a.mdx)("p",null,"We do not support the use of the ",(0,a.mdx)("em",{parentName:"p"},"dot")," character (",(0,a.mdx)("inlineCode",{parentName:"p"},"."),") in section names within Buck2 configuration files. For example, the following is ",(0,a.mdx)("strong",{parentName:"p"},"not")," supported\u2014",(0,a.mdx)("em",{parentName:"p"},"although Buck2 does not issue a warning or error"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-ini"},"[foo.bar]\n  baz=1\n")),(0,a.mdx)("p",null,"Note that sometimes you might need to define your own custom sections, such as for platform flavors for C++ or Python. These scenarios are examples of when you should be careful not to introduce the dot character in section names.\nThis constraint is because Buck2 uses the dot character to delimit section names and key names in other contexts such as the ",(0,a.mdx)("inlineCode",{parentName:"p"},"--config")," command-line parameter."),(0,a.mdx)("h2",{id:"character-encoding"},"Character encoding"),(0,a.mdx)("p",null,"To ensure that any character can be encoded in a ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," key value, you can use escape sequences to encode characters that would otherwise be problematic.\nThe following escape sequences are supported."),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"th"},"\\\\")),(0,a.mdx)("th",{parentName:"tr",align:null},"backslash"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},'\\"')),(0,a.mdx)("td",{parentName:"tr",align:null},"double quote")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"\\n")),(0,a.mdx)("td",{parentName:"tr",align:null},"newline")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"\\r")),(0,a.mdx)("td",{parentName:"tr",align:null},"carriage return")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"\\t")),(0,a.mdx)("td",{parentName:"tr",align:null},"tab")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"\\x##")),(0,a.mdx)("td",{parentName:"tr",align:null},"Unicode character with code point ## (in hex)")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"\\u####")),(0,a.mdx)("td",{parentName:"tr",align:null},"Unicode character with code point #### (in hex)")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"\\U########")),(0,a.mdx)("td",{parentName:"tr",align:null},"Unicode character with code point ######## (in hex)")))),(0,a.mdx)("h2",{id:"key-values-as-lists"},"Key values as lists"),(0,a.mdx)("p",null,"Although the standard INI format supports only key values that represent a single item, Buck2 supports key values that represent a list of items. The syntax is to separate the items in the list using the space (",(0,a.mdx)("inlineCode",{parentName:"p"},"0x20"),") character. For example, a key value for the list of command-line flags to be passed to a compiler could be represented as a list of the flags separated by spaces:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"flags = -foo -bar -baz -qux\n")),(0,a.mdx)("p",null,"When a key value is parsed as a list instead of a single item, the separator character is interpreted as a separator only when it occurs ",(0,a.mdx)("em",{parentName:"p"},"outside of double quotes"),". For example, if ",(0,a.mdx)("inlineCode",{parentName:"p"},"flags")," is a key value interpreted as a list of items separated by spaces, then"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'flags = -foo "-bar \\u0429"\n')),(0,a.mdx)("p",null,"results in the two strings: ",(0,a.mdx)("inlineCode",{parentName:"p"},"foo")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"-bar \u0429"),"; the space character between ",(0,a.mdx)("inlineCode",{parentName:"p"},"-bar")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"\\u0429")," is not interpreted as a separator."),(0,a.mdx)("h2",{id:"transclusion-of-values-from-one-key-to-another"},"Transclusion of values from one key to another"),(0,a.mdx)("p",null,"Values from other keys can be transcluded into the current key using the following syntax inside the current key value."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"$(config <section>.<field>)\n")),(0,a.mdx)("p",null,"For example, to use the ",(0,a.mdx)("inlineCode",{parentName:"p"},"[go].vendor_path")," in a custom setting:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"[custom_section]custom_value = $(config go.vendor_path)\n")),(0,a.mdx)("h2",{id:"comments"},"Comments"),(0,a.mdx)("p",null,"In addition to the semicolon (",(0,a.mdx)("inlineCode",{parentName:"p"},";"),"), you can use the pound sign (",(0,a.mdx)("inlineCode",{parentName:"p"},"#"),"), as a comment character in ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig"),"."),(0,a.mdx)("h2",{id:"buckconfiglocal"},".buckconfig.local"),(0,a.mdx)("p",null,"The root of your ",(0,a.mdx)("a",{parentName:"p",href:"/docs/concepts/glossary#project"},"project")," may contain a second configuration file named ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig.local"),". Its format is the same as that of ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig"),", but settings in ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig.local")," override those in ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". In practice, ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," is a version-controlled file that contains settings that are applicable to all team members, whereas ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig.local")," is excluded from version control to allow users to define personal settings, such as personal aliases."),(0,a.mdx)("h2",{id:"other-initialization-files"},"Other initialization files"),(0,a.mdx)("p",null,"In addition to the ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig.local")," files in the project root, Buck2 reads configuration settings from the following additional locations, some of which are actually directories:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Directory ",(0,a.mdx)("inlineCode",{parentName:"li"},".buckconfig.d")," located in the project root directory."),(0,a.mdx)("li",{parentName:"ol"},"File ",(0,a.mdx)("inlineCode",{parentName:"li"},".buckconfig")," and directory ",(0,a.mdx)("inlineCode",{parentName:"li"},".buckconfig.d")," located in the current user's home directory which, on Unix-like systems, is available from the ",(0,a.mdx)("inlineCode",{parentName:"li"},"HOME")," environment variable or through the ",(0,a.mdx)("inlineCode",{parentName:"li"},"~")," symbol."),(0,a.mdx)("li",{parentName:"ol"},"File ",(0,a.mdx)("inlineCode",{parentName:"li"},"buckconfig")," and directory ",(0,a.mdx)("inlineCode",{parentName:"li"},"buckconfig.d")," located in system directory ",(0,a.mdx)("inlineCode",{parentName:"li"},"/etc/"),".")),(0,a.mdx)("p",null,"Buck2 treats ",(0,a.mdx)("em",{parentName:"p"},"any")," file\u2014irrespective of name\u2014in a ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig.d"),"(",(0,a.mdx)("inlineCode",{parentName:"p"},"buckconfig.d"),") directory (excluding files found in subdirectories) as a Buck2 configuration file, provided that it adheres to ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," syntax.\nNote that a ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig.d")," directory is distinct from the similarly-named ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckd")," directory which is used by the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/concepts/daemon"},"Buck2 Daemon (",(0,a.mdx)("inlineCode",{parentName:"a"},"buckd"),")")," .\nFor a description of how Buck2 resolves collisions between settings in these configuration files, see the section ",(0,a.mdx)("a",{parentName:"p",href:"#precedence-of-buck2-configuration-specifications"},(0,a.mdx)("strong",{parentName:"a"},"Precedence of Buck2 configuration specifications")),"\nbelow."),(0,a.mdx)("h2",{id:"command-line-control-of-configuration"},"Command-line control of configuration"),(0,a.mdx)("p",null,"In addition to the above configuration files, Buck2 supports specifying additional configuration files from the Buck2 command line using the ",(0,a.mdx)("inlineCode",{parentName:"p"},"--config-file")," parameter.\nYou can also specify configuration settings ",(0,a.mdx)("em",{parentName:"p"},"individually")," on the Buck2 command line using the ",(0,a.mdx)("inlineCode",{parentName:"p"},"--config")," (",(0,a.mdx)("inlineCode",{parentName:"p"},"-c"),") parameter. Furthermore, you can aggregate these settings into ",(0,a.mdx)("em",{parentName:"p"},"flag files")," using the ",(0,a.mdx)("inlineCode",{parentName:"p"},"--flagfile")," parameter. A flag file provides similar functionality to a configuration file but uses a different syntax. Flag files are sometimes called ",(0,a.mdx)("em",{parentName:"p"},"mode files")," or ",(0,a.mdx)("em",{parentName:"p"},"at")," (",(0,a.mdx)("inlineCode",{parentName:"p"},"@"),") files."),(0,a.mdx)("h2",{id:"precedence-of-buck2-configuration-specifications"},"Precedence of Buck2 configuration specifications"),(0,a.mdx)("p",null,"The following list shows the order of precedence for how Buck2 interprets its configuration specifications. Settings specified using a method closer to the top of the list have higher precedence and will override those lower on the list. For example, the ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file in the repo overrides a ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file in the user's ",(0,a.mdx)("inlineCode",{parentName:"p"},"HOME")," directory."),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Configuration specified on the command line using ",(0,a.mdx)("inlineCode",{parentName:"li"},"--config")," (",(0,a.mdx)("inlineCode",{parentName:"li"},"-c"),"), ",(0,a.mdx)("inlineCode",{parentName:"li"},"--config-file")," and ",(0,a.mdx)("inlineCode",{parentName:"li"},"--flagfile"),". Configuration specified later on the command line overrides configuration specified earlier."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},".buckconfig.local")," in the repo."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},".buckconfig")," in the repo."),(0,a.mdx)("li",{parentName:"ol"},"Files in a ",(0,a.mdx)("inlineCode",{parentName:"li"},".buckconfig.d")," folder of the repo."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},".buckconfig.local")," in user's ",(0,a.mdx)("inlineCode",{parentName:"li"},"HOME")," directory."),(0,a.mdx)("li",{parentName:"ol"},"Files in a ",(0,a.mdx)("inlineCode",{parentName:"li"},".buckconfig.d")," folder in user's ",(0,a.mdx)("inlineCode",{parentName:"li"},"HOME")," directory."),(0,a.mdx)("li",{parentName:"ol"},"The global file ",(0,a.mdx)("inlineCode",{parentName:"li"},"/etc/buckconfig")),(0,a.mdx)("li",{parentName:"ol"},"Files in the global directory ",(0,a.mdx)("inlineCode",{parentName:"li"},"/etc/buckconfig.d"))),(0,a.mdx)("p",null,"Files in a ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig.d")," (",(0,a.mdx)("inlineCode",{parentName:"p"},"buckconfig.d"),") directory have precedence according to the lexicographical order of their file names. Files ",(0,a.mdx)("em",{parentName:"p"},"later")," in the lexicographical order have precedence over files earlier in that order."),(0,a.mdx)("h2",{id:"configuration-files-can-include-other-files"},"Configuration files can include other files"),(0,a.mdx)("p",null,"Any of the configuration files that we've discussed so far can also include by reference other files that contain configuration information. These included files can contain complete ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," sections or they can contain a group of key name/value pairs that constitute part of a section. In this second use case, you'll need to ensure that the ",(0,a.mdx)("em",{parentName:"p"},"included")," file is referenced beneath the appropriate section in the ",(0,a.mdx)("em",{parentName:"p"},"including")," file. Because of this additional complexity, we recommend that you include only files that contain complete sections.\n",(0,a.mdx)("strong",{parentName:"p"},"Note:")," Inclusion of files is a Buck-specific extension to the INI file parser that Buck2 uses. Therefore, if you use this feature, your Buck2 configuration files will probably not be parsable by other more-generic INI file parsers.\nThe syntax to include a file is"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"<file:*path-to-included-file*>\n")),(0,a.mdx)("p",null,"where ",(0,a.mdx)("em",{parentName:"p"},"path-to-included-file")," is either a relative path from the including file (recommended) or an absolute path from the root of the file system.\nYou can also specify that the file should be included only if it exists by prefixing with a question mark (",(0,a.mdx)("inlineCode",{parentName:"p"},"?"),")."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"<?file:*path-to-included-file*>\n")),(0,a.mdx)("p",null,"If you use this prefix, it is not an error condition if the file does not exist; Buck2 just silently continues to process the rest of the configuration file.\nIn the following example, the ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file includes the file ",(0,a.mdx)("inlineCode",{parentName:"p"},"cxx-other-platform.include")," which exists in the subdirectory ",(0,a.mdx)("inlineCode",{parentName:"p"},"cxx-other-platform"),". The ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file will also include the file ",(0,a.mdx)("inlineCode",{parentName:"p"},"future-platform")," from the directory ",(0,a.mdx)("inlineCode",{parentName:"p"},"future-platform.include")," if that file exists."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},'#\n# .buckconfig\n#\n[cxx]\n  cxxppflags="-D MYMACRO=\\"Buck\\""\n\n<file:cxx-other-platform/cxx-other-platform.include>\n\n<?file:future-platform/future-platform.include>\n#\n# cxx-other-platform.include\n#\n[cxx#other_platform]\n  cxxppflags="-D MYMACRO=\\"Watchman\\""\n')))}m.isMDXComponent=!0}}]);